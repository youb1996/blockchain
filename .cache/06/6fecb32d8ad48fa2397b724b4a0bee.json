{"id":"../../node_modules/@restart/hooks/useCommittedRef.js","dependencies":[{"name":"/home/ubn/blockchain/package.json","includedInParent":true,"mtime":1559011904117},{"name":"/home/ubn/blockchain/.babelrc","includedInParent":true,"mtime":1558913021562},{"name":"/home/ubn/blockchain/node_modules/@restart/hooks/package.json","includedInParent":true,"mtime":1559002724791},{"name":"react","loc":{"line":6,"column":21},"parent":"/home/ubn/blockchain/node_modules/@restart/hooks/useCommittedRef.js","resolved":"/home/ubn/blockchain/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded befor being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  var ref = (0, _react.useRef)(value);\n  (0, _react.useEffect)(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nvar _default = useCommittedRef;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/@restart/hooks/useCommittedRef.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"../../node_modules/@restart/hooks/useCommittedRef.js":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded befor being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  var ref = (0, _react.useRef)(value);\n  (0, _react.useEffect)(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nvar _default = useCommittedRef;\nexports.default = _default;"},"lineCount":26}},"error":null,"hash":"1df0c930759ba1a88c4ad930aef64d6b","cacheData":{"env":{}}}